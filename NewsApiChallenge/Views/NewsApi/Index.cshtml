@model NewsApiChallenge.News.NewsApiArticles

@{
    ViewData["Title"] = "Index";
}

@using X.PagedList.Mvc.Core; @*import this so we get our HTML Helper*@
@using X.PagedList; @*import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@
@using X.PagedList.Mvc.Core.Common;


@if (ViewBag.Error != null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Holy guacamole!</strong> It looks like there was an error while fetching the data:

        <ul>
            <li>Code: @Model.code</li>
            <li>Message: @Model.message</li>
        </ul>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
<h1>News Articles</h1>

<div>
    @*<h4>News Articles</h4>*@
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.totalResults)
        </dt>
        <dd class="col-sm-10">
            @if (Model.articles != null)
            {
                @Html.Display($"{@Model.articles.Count()} out of {@Model.totalResults}");
            }

        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.status)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.status)
        </dd>
        @*<dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.code)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.code)
            </dd>*@
        @*<dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.message)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.message)
            </dd>*@
    </dl>
</div>




@using (Html.BeginForm("Index"))
{
    <div class="container-fluid mb-3">
        <div class="row">
            <h3>Search news</h3>
        </div>
        <div class="row">
            <div class="col-2">Author: </div>
            <div class="col-2">@Html.TextBox("Author")</div>
        </div>

        <div class="row">
            <div class="col-2">Keyword: </div>
            <div class="col-2">@Html.TextBox("q")</div>
        </div>

        <div class="row">
            <div class="col-2">Title Keyword: </div>
            <div class="col-2">@Html.TextBox("Titleq")</div>
        </div>
        <div class="row">
            <div class="col-2">Source: </div>
            <div class="col-2">@Html.TextBox("source")</div>
        </div>
        <div class="row">
            <div class="col-2">Date From: </div>
            <div class="col-2">@Html.TextBox("DateFrom")</div>
        </div>

        <div class="row">
            <div class="col-2">DateTo: </div>
            <div class="col-2">@Html.TextBox("DateTo")</div>
        </div>

        <div class="row">
            <div class="col-2">Sort By: </div>
            <div class="col-2">@Html.TextBox("SortBy")</div>
        </div>

        <div class="row">
            <div class="col-2">Language: </div>
            <div class="col-2">@Html.TextBox("Language")</div>
        </div>

        <div class="row">
            <div class="col-2"></div>
            <div class="col-2"><input class="w-100" type="submit" value="Search" id="btnSubmit" /></div>
        </div>

    </div>
}

    @if (Model.articles != null)
    {
        <!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
        @Html.PagedListPager((IPagedList)ViewBag.OnePageOfUsers, page => Url.Action("Index", new { pageIndex = page }),
                new PagedListRenderOptions
                {
                    LiElementClasses = new string[] { "page-item" },
                    PageClasses = new string[] { "page-link" }
                })
    }


    <table class="table" id="articles">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.articles[0].author)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.articles[0].title)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.articles[0].description)
                </th>
                @*<th>
                        @Html.DisplayNameFor(model => model.articles[0].url)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.articles[0].urlToImage)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.articles[0].publishedAt)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.articles[0].content)
                    </th>
                *@
                <th></th>
            </tr>
        </thead>
        <tbody>

            @if (Model.articles != null)
            {
                @foreach (var item in Model.articles)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.author)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.title)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.description)
                        </td>
                        @*<td>
                                @Html.DisplayFor(modelItem => item.url)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.urlToImage)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.publishedAt)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.content)
                            </td>*@
                        <td>
                            @*@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |*@
                            @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ })
                            @*@Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })*@
                        </td>
                    </tr>
                }
            }
        </tbody>



    </table>



    @if (Model.articles != null)
    {
        <div>
            <!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
            @Html.PagedListPager((IPagedList)ViewBag.OnePageOfUsers, page => Url.Action("Index", new { pageIndex = page }),
                    new PagedListRenderOptions
                    {
                        LiElementClasses = new string[] { "page-item" },
                        PageClasses = new string[] { "page-link" }
                    })
        </div>
    }





